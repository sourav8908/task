üéØ Objective:

Deploy and run a two-tier Flask + MySQL application using Docker Compose.
The Flask app should connect to MySQL through a custom bridge network, and both services should be managed entirely from a single docker-compose.yml file.

üß† Concept Summary:

Tier 1: Flask (Application Layer)

Tier 2: MySQL (Data Layer)

Communication via Docker internal DNS (mysql-db hostname).

‚öôÔ∏è Instructions / Specifications:

1Ô∏è‚É£ Project Setup

Clone the project repository from GitHub:

git clone https://github.com/LondheShubham153/two-tier-flask-app.git
cd two-tier-flask-app


Folder Name ‚Üí two-tier-flask-app

Provided Files ‚Üí

app.py ‚Üí Flask application connecting to MySQL

Dockerfile ‚Üí Instructions to build Flask image

2Ô∏è‚É£ Service Details (docker-compose.yml)

Flask Service:

Container ‚Üí flask-app

Image ‚Üí two-tier-backend

Host Port ‚Üí 8900, Container Port ‚Üí 5000

Environment Variables:

MYSQL_HOST = mysql-db

MYSQL_USER = root

MYSQL_PASSWORD = my-secret-pw

MYSQL_DB = devops

Depends On ‚Üí mysql-db

Network ‚Üí two-tier-network

MySQL Service:

Container ‚Üí mysql-db

Image ‚Üí mysql:latest

Environment Variables:

MYSQL_ROOT_PASSWORD = my-secret-pw

MYSQL_DATABASE = devops

Volume ‚Üí mysql_data:/var/lib/mysql

Network ‚Üí two-tier-network

3Ô∏è‚É£ Network & Volume Configuration

Create a user-defined network named two-tier-network.

Create a named volume mysql_data for persistent MySQL storage.

4Ô∏è‚É£ Execution Flow

Build and run the complete application using Docker Compose.

Both services (Flask + MySQL) must start together and connect automatically.

Flask should be accessible on port 8900 via the browser.

5Ô∏è‚É£ Verification

Open your browser ‚Üí Visit: http://localhost:8900

The Flask web app should load successfully.

Submit sample data via the app and confirm it is stored in the MySQL devops database.

Ensure both containers (flask-app, mysql-db) are running and attached to two-tier-network.